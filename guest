#! /usr/bin/guile \
--debug -s
!#
(use-modules (ice-9 ftw)
             (ice-9 regex)
             (ice-9 getopt-long)
             (guest test)
             (guest printer)
             (srfi srfi-1)
             (srfi srfi-11)
             (sxml fold)
             ((system vm coverage)
              #:select (with-code-coverage instrumented/executed-lines line-execution-counts))
             (guest coverage))

(define (tests-passed ret)
  (= (car ret)
     (cdr ret)))

(define (tokenize str)
  (if (string? str)
    (delete "" (string-split str char-set:whitespace))
    str))

(define (coverage-ratio data files)
  (let ((ret (fold
               (lambda (file counts)
                 (let-values (((i x) (instrumented/executed-lines data file)))
                   (cons
                     (+ i (car counts))
                     (+ x (cdr counts)))))
               '(0 . 0)
               files)))
    (/ (cdr ret) (car ret))))

(define args (getopt-long (command-line)
                          `((cover     (single-char #\c) (value #t))
                            (cover-out (single-char #\o) (value #t)))))


(define cover (tokenize (assoc-ref args 'cover)))
(define tests (tokenize (assoc-ref args '())))
(define cover-out (assoc-ref args 'cover-out))

(define (load-tests tests)
  (for-each
    (lambda (test)
      (ftw test
        (lambda (filename statinfo flag)
          (when (and (eq? flag 'regular)
                     (string-match ".scm$" filename))
            (load (string-append (getcwd) "/" filename)))
          #t)))
    tests))

(let*-values (((data ret)
               (with-code-coverage
                 (lambda ()
                   (load-tests tests)
                   (run-guest default-printer))))
              ((cover) (if cover
                         (filter
                           (lambda (file)
                             (line-execution-counts data file))
                           cover)
                         #f)))
  (when cover
    (write data)
    (newline)
    (write cover)
    (newline)
    (format #t "test coverage: ~$%\n"
            (* 100 (coverage-ratio data cover))))
  (when cover-out
    (call-with-output-file cover-out
      (lambda (port)
        (coverage-data->lcov data port #:files cover))))
  (exit (tests-passed ret)))
