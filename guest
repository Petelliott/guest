#! /usr/bin/guile \
--debug -s
!#
(use-modules (ice-9 ftw)
             (ice-9 regex)
             (ice-9 getopt-long)
             (guest test)
             (guest printer)
             (srfi srfi-1)
             (srfi srfi-11)
             (sxml fold)
             ((system vm coverage)
              #:select (with-code-coverage instrumented/executed-lines line-execution-counts))
             (guest coverage))

(define (tests-passed ret)
  (= (car ret)
     (cdr ret)))

(define (tokenize str)
  (if (string? str)
    (delete "" (string-split str char-set:whitespace))
    str))

(define (coverage-ratio data files)
  (let ((ret (fold
               (lambda (file counts)
                 (let-values (((i x) (instrumented/executed-lines data file)))
                   (cons
                     (+ i (car counts))
                     (+ x (cdr counts)))))
               '(0 . 0)
               files)))
    (/ (cdr ret) (car ret))))

(define args (getopt-long (command-line)
                          `((cover     (single-char #\c) (value #t))
                            (cover-out (single-char #\o) (value #t)))))


(define cover (tokenize (assoc-ref args 'cover)))
(define tests (tokenize (assoc-ref args '())))
(define cover-out (assoc-ref args 'cover-out))

(define (load-tests tests)
  (for-each
    (lambda (test)
      (ftw test
        (lambda (filename statinfo flag)
          (when (and (eq? flag 'regular)
                     (string-match ".scm$" filename))
            (load (string-append (getcwd) "/" filename)))
          #t)))
    tests))

(define (contains lst elem)
  "true if elem in lst using equal?"
  (cond
    ((null? lst) #f)
    ((equal? (car lst) elem) lst)
    (#t (contains (cdr lst) elem))))

(define (del-from-list dels lst)
  "returns a new list without any element that is in dels"
  (filter
    (lambda (elem)
      (not (contains dels elem)))
    lst))

(define old-mods (module-uses (current-module)))

(load-tests tests)

(define mods-to-reload
  (map
    resolve-module
    (map
      module-name
      (del-from-list
        old-mods
        (module-uses (current-module))))))

(write mods-to-reload)
(newline)

#;(define (reload-coverage files)
  "reloads all files in 'files'"
  (define last-module (current-module))
  (for-each
    load-from-path
    files)
  (set-current-module last-module))

(let*-values (((data ret)
               (with-code-coverage
                 (lambda ()
                   ;TODO: figure out loading tests in coverage
                   #;(load-tests tests)
                   ;(reload-coverage cover)
                   ;(for-each reload-module mods-to-reload)
                   (run-guest default-printer))))
              ((cover) (if cover
                         (filter
                           (lambda (file)
                             (line-execution-counts data file))
                           cover)
                         #f)))
  (when cover
    (format #t "test coverage: ~$%\n"
            (* 100 (coverage-ratio data cover))))
  (when cover-out
    (call-with-output-file cover-out
      (lambda (port)
        (coverage-data->lcov data port #:files cover))))
  (exit (tests-passed ret)))
